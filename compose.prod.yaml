services:
  # MySQL Database with production optimizations
  database:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-crypto_exchange}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - database_data:/var/lib/mysql:rw
      - ./docker/mysql/conf.d:/etc/mysql/conf.d:ro
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - app-network

  # PHP Application (production build)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    environment:
      APP_ENV: prod
      APP_SECRET: ${APP_SECRET}
      DATABASE_URL: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@database:3306/${MYSQL_DATABASE}?serverVersion=8.0&charset=utf8mb4
      MESSENGER_TRANSPORT_DSN: doctrine://default?auto_setup=0
    volumes:
      - app_var:/var/www/html/var:rw
      - app_logs:/var/www/html/var/log:rw
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  # Scheduler service (separate container for reliability)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: scheduler
    environment:
      APP_ENV: prod
      APP_SECRET: ${APP_SECRET}
      DATABASE_URL: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@database:3306/${MYSQL_DATABASE}?serverVersion=8.0&charset=utf8mb4
    volumes:
      - app_logs:/var/www/html/var/log:rw
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  # Nginx Web Server with SSL termination
  nginx:
    image: nginx:alpine
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./public:/var/www/html/public:ro
      - nginx_logs:/var/log/nginx:rw
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.crypto-exchange.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.routers.crypto-exchange.tls=true"
      - "traefik.http.routers.crypto-exchange.tls.certresolver=letsencrypt"

  # Redis for caching and sessions
  redis:
    image: redis:alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data:rw
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
    networks:
      - app-network

  # Reverse proxy with SSL termination (optional)
  traefik:
    image: traefik:v3.0
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt:/letsencrypt:rw"
    restart: unless-stopped
    networks:
      - app-network

volumes:
  database_data:
  redis_data:
  app_var:
  app_logs:
  nginx_logs:
  letsencrypt:

networks:
  app-network:
    driver: bridge
